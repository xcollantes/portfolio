# Links
# Do not include `NEXT_PUBLIC_` for secret values.
# Values with `NEXT_PUBLIC_` show up in the frontend.
NEXT_PUBLIC_LINKEDIN_URL="https://www.linkedin.com/in/xaviercollantes"
NEXT_PUBLIC_GITHUB_URL="https://github.com/xcollantes"
NEXT_PUBLIC_SHARE_URL=""

# NextAuth providers
#
# Register NextAuth API URL endpoint with the OAuth 3rd party provider.

# NextAuth uses this URL: "https://<host>/api/auth/callback/google"
# Google configure OAuth screen: https://developers.google.com/identity/protocols/oauth2
# "Authorized domains": https://<host>
# "Authorized redirect URIs": https://<host>/api/auth/callback/google
GOOGLE_CLIENT_ID=""
GOOGLE_SECRET=""

# LinkedIn configure OAuth
LINKEDIN_CLIENT_ID=""
LINKEDIN_CLIENT_SECRET=""

# Generate hash for signing cryptographic tokens
# https://next-auth.js.org/configuration/options#secret
NEXTAUTH_SECRET=""

# Tell NextAuth where the requests are coming from.
NEXTAUTH_URL="http://localhost:3000/"

# Google Sheets
#
# Sheets as a database for authorized users.
# Sheet must be shared with the Service Account you created.
# Google Sheet format: The sheet must have a tab named "allow" and the tab should only have
# only the column A:A.
SHEET_ID=""

# Service Account Key file
#
# Used for reading Sheets allow list of emails.
# 1. Create Google Cloud Platform project.
# 2. Enable "Sheets API": https://console.cloud.google.com/marketplace/product/google/sheets.googleapis.com
# 3. Create Service Account. "Service Account User" should be the only role you need.       
# 4. Download the JSON service key file.
# 5. Extract the fields from the file and include below.
GOOGLE_CRED_CLIENT_ID=""
GOOGLE_CRED_CLIENT_EMAIL=""
GOOGLE_CRED_PRIVATE_KEY="-----BEGIN PRIVATE ... -----END PRIVATE KEY-----\n"